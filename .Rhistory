summary(mm.1)
assign(paste(analyte, dfname, ".1", sep = ""), mm.1, envir=.GlobalEnv)
mm.2.step <- lmerTest::step(mm.1)
mm.2.step
mm.2 <- get_model(mm.2.step)
#print(summary(mm.2))
#print(anova(mm.2))
assign(paste(analyte, dfname, ".2", sep = ""), mm.2, envir=.GlobalEnv)
}
## dh ----
lapply(X = contam_list,
FUN = hdslmerstepFX,
dataDF = iws.dh,
dfname.string = ".dh")
summary(Al.dh.1)
## dh ----
lapply(X = contam_list,
FUN = hdslmerstepFX,
dataDF = iws.dh,
dfname.string = ".dh")
aaa <- "Al"
iw.score.long[,iw.score.long$analyte==aaa]
iw.score.long[iw.score.long$analyte==aaa,]
m.1 <- lmer(data = iw.score.long[iw.score.long$analyte==aaa,],
log(concentration)) ~ season + prox.normal + score_bin +
(1|site),
m.1 <- lmer(data = iw.score.long[iw.score.long$analyte==aaa,],
log(concentration) ~ season + prox.normal + score_bin +
(1|site),
REML = F)
hdslmerstepFX <- function(datalongDF, analyte.string, dfname.string){
datlong <- datalongDF
analyte.s <- analyte.string
dfname <- dfname.string
dat <- datlong[datlong$analyte == analyte.s,]
mm.0 <- lmer(data = dat,
log(concentration) ~
(1|site),
REML = F)
summary(mm.0)
assign(paste(analyte.s, dfname, ".0", sep = ""), mm.0, envir=.GlobalEnv)
mm.1 <- lmer(data = dat,
log(concentration) ~ season + prox.normal + score_bin +
(1|site),
REML = F)
summary(mm.1)
assign(paste(analyte.s, dfname, ".1", sep = ""), mm.1, envir=.GlobalEnv)
mm.2.step <- lmerTest::step(mm.1)
mm.2.step
mm.2 <- get_model(mm.2.step)
#print(summary(mm.2))
#print(anova(mm.2))
assign(paste(analyte.s, dfname, ".2", sep = ""), mm.2, envir=.GlobalEnv)
}
## dh ----
lapply(X = contam_list,
FUN = hdslmerstepFX,
dataDF = iw.score.long,
dfname.string = ".dh")
hdslmerstepFX <- function(datalongDF, analyte.string, dfname.string){
datlong <- datalongDF
analyte.s <- analyte.string
dfname <- dfname.string
dat <- datlong[datlong$analyte == analyte.s,]
mm.0 <- lmer(data = dat,
log(concentration) ~
(1|site),
REML = F)
summary(mm.0)
assign(paste(analyte.s, dfname, ".0", sep = ""), mm.0, envir=.GlobalEnv)
mm.1 <- lmer(data = dat,
log(concentration) ~ season + prox.normal + score_bin +
(1|site),
REML = F)
summary(mm.1)
assign(paste(analyte.s, dfname, ".1", sep = ""), mm.1, envir=.GlobalEnv)
mm.2.step <- lmerTest::step(mm.1)
mm.2.step
mm.2 <- get_model(mm.2.step)
#print(summary(mm.2))
#print(anova(mm.2))
assign(paste(analyte.s, dfname, ".2", sep = ""), mm.2, envir=.GlobalEnv)
}
hdslmerstepFX(datalongDF = iw.score.long,
analyte.string = "Al",
dfname.string = ".all")
hdslmerstepFX <- function(datalongDF, analyte.string, dfname.string){
datlong <- datalongDF
analyte.s <- analyte.string
dfname <- dfname.string
dat <- datlong[datlong$analyte == analyte.s,]
mm.0 <- lmer(data = dat,
log(concentration) ~
(1|site),
REML = F)
summary(mm.0)
assign(paste(analyte.s, dfname, ".0", sep = ""), mm.0, envir=.GlobalEnv)
mm.1 <- lmer(data = dat,
log(concentration) ~ season + prox.normal + score_bin +
(1|site),
REML = F)
summary(mm.1)
assign(paste(analyte.s, dfname, ".1", sep = ""), mm.1, envir=.GlobalEnv)
#mm.2.step <- lmerTest::step(mm.1)
#mm.2.step
#mm.2 <- get_model(mm.2.step)
#print(summary(mm.2))
#print(anova(mm.2))
#assign(paste(analyte.s, dfname, ".2", sep = ""), mm.2, envir=.GlobalEnv)
}
hdslmerstepFX(datalongDF = iw.score.long,
analyte.string = "Al",
dfname.string = ".all")
hdslmerstepFX <- function(datalongDF, analyte.string, dfname.string){
datlong <- datalongDF
analyte.s <- analyte.string
dfname <- dfname.string
dat <- datlong[datlong$analyte == analyte.s,]
mm.0 <- lmer(data = dat,
log(concentration) ~
(1|site),
REML = F)
summary(mm.0)
assign(paste(analyte.s, dfname, ".0", sep = ""), mm.0, envir=.GlobalEnv)
mm.1 <- lmer(data = dat,
log(concentration) ~ season + prox.normal + score_bin +
(1|site),
REML = F)
summary(mm.1)
assign(paste(analyte.s, dfname, ".1", sep = ""), mm.1, envir=.GlobalEnv)
mm.2.step <- step(mm.1)
mm.2.step
mm.2 <- get_model(mm.2.step)
#print(summary(mm.2))
#print(anova(mm.2))
assign(paste(analyte.s, dfname, ".2", sep = ""), mm.2, envir=.GlobalEnv)
}
hdslmerstepFX(datalongDF = iw.score.long,
analyte.string = "Al",
dfname.string = ".all")
hdslmerstepFX <- function(datalongDF, analyte.string, dfname.string){
datlong <- datalongDF
analyte.s <- analyte.string
dfname <- dfname.string
dat <- datlong[datlong$analyte == analyte.s,]
mm.0 <- lmer(data = dat,
log(concentration) ~
(1|site),
REML = F)
summary(mm.0)
assign(paste(analyte.s, dfname, ".0", sep = ""), mm.0, envir=.GlobalEnv)
mm.1 <- lmer(data = dat,
log(concentration) ~ season + prox.normal + score_bin +
(1|site),
REML = F)
summary(mm.1)
assign(paste(analyte.s, dfname, ".1", sep = ""), mm.1, envir=.GlobalEnv)
mm.2.step <- step(mm.1)
#mm.2.step
#mm.2 <- get_model(mm.2.step)
#print(summary(mm.2))
#print(anova(mm.2))
#assign(paste(analyte.s, dfname, ".2", sep = ""), mm.2, envir=.GlobalEnv)
}
hdslmerstepFX(datalongDF = iw.score.long,
analyte.string = "Al",
dfname.string = ".all")
hdslmerstepFX <- function(datalongDF, analyte.string, dfname.string){
datlong <- datalongDF
analyte.s <- analyte.string
dfname <- dfname.string
dat <- datlong[datlong$analyte == analyte.s,]
mm.0 <- lmer(data = dat,
log(concentration) ~
(1|site),
REML = F)
summary(mm.0)
#assign(paste(analyte.s, dfname, ".0", sep = ""), mm.0, envir=.GlobalEnv)
mm.1 <- lmer(data = dat,
log(concentration) ~ season + prox.normal + score_bin +
(1|site),
REML = F)
summary(mm.1)
#assign(paste(analyte.s, dfname, ".1", sep = ""), mm.1, envir=.GlobalEnv)
mm.2.step <- step(mm.1)
#mm.2.step
#mm.2 <- get_model(mm.2.step)
#print(summary(mm.2))
#print(anova(mm.2))
#assign(paste(analyte.s, dfname, ".2", sep = ""), mm.2, envir=.GlobalEnv)
}
hdslmerstepFX(datalongDF = iw.score.long,
analyte.string = "Al",
dfname.string = ".all")
hdslmerstepFX <- function(datalongDF, analyte.string, dfname.string){
datlong <- datalongDF
analyte.s <- analyte.string
dfname <- dfname.string
dat <- datlong[datlong$analyte == analyte.s,]
mm.0 <- lmer(data = dat,
log(concentration) ~
(1|site),
REML = F)
print(summary(mm.0))
#assign(paste(analyte.s, dfname, ".0", sep = ""), mm.0, envir=.GlobalEnv)
mm.1 <- lmer(data = dat,
log(concentration) ~ season + prox.normal + score_bin +
(1|site),
REML = F)
print(summary(mm.1))
#assign(paste(analyte.s, dfname, ".1", sep = ""), mm.1, envir=.GlobalEnv)
mm.2.step <- step(mm.1)
#mm.2.step
#mm.2 <- get_model(mm.2.step)
#print(summary(mm.2))
#print(anova(mm.2))
#assign(paste(analyte.s, dfname, ".2", sep = ""), mm.2, envir=.GlobalEnv)
}
hdslmerstepFX(datalongDF = iw.score.long,
analyte.string = "Al",
dfname.string = ".all")
#load libraries
library(readxl)
library(MASS)
library(tidyverse)
library(ggplot2)
library(EnvStats)
library(aod)
library(wesanderson)
library(car)
library(GGally)
library(reshape2)
library(lme4)
library(compiler)
library(parallel)
library(boot)
library(lattice)
library(performance)
standards <- read_xlsx("~/Documents/GitHub/ProjectHarvest/WorkingFiles/data/data_processing/Standards.xlsx", sheet = "standards", col_names = TRUE)
#join standard data to contaminant data, this repeats the standard data for each analyte for each sample
ex.dat <- full_join(iw.dm.long, standards, by = c("analyte"))
#make longer
ex.dat.long <- pivot_longer(data = ex.dat,
cols = PB:LDW,
values_to = "standard_value",
names_to = "standard")
#calculate exceedance
ex.dat.long$exceedance <- ifelse(ex.dat.long$value > ex.dat.long$standard_value,1,0)
#remove standard value for ease of making wider
ex.dat.long <- subset(ex.dat.long, select = -c(standard_value))
#remove NAs for analytes that do not have standards
ex.dat.long <- ex.dat.long %>%
drop_na(exceedance)
#data for modeling
#drop samples without proximity data
ex.dat.long.prox <- ex.dat.long %>%
drop_na(proximity.km) %>%
drop_na(prox.normal)
#split dataframe into different ones for each community
exc <- ex.dat.long.prox %>%
group_by(community) %>%
group_split()
exdh <- exc[[1]]
exgm <- exc[[2]]
exhw <- exc[[3]]
extu <- exc[[4]]
exp(coef(aicu.hw.2))
### hw ----
aicu.hw.0 <- glm(data = exhw[exhw$standard=="AI"&exhw$analyte=="Cu",],
exceedance ~ 1,
family = "binomial")
#maximal.hw model
aicu.hw.1 <- glm(data = exhw[exhw$standard=="AI"&exhw$analyte=="Cu",],
exceedance ~ proximity.km + season,
family = "binomial")
aicu.hw.2 <- stepAIC(aicu.hw.0,scope = list(upper=aicu.hw.1), direction="both", trace = T)
summary(aicu.hw.2) #both variables significant with a trend that makes sense
performance(aicu.hw.2)
exp(coef(aicu.hw.2))
#get confidence intervals for estimates
se <- sqrt(diag(vcov(aicu.hw.2)))
# table of estimates with 95% CI
(tab <- cbind(Est = fixef(aicu.hw.2), LL = fixef(aicu.hw.2) - 1.96 * se, UL = fixef(aicu.hw.2) + 1.96 *
se))
logit2prob <- function(logit){
odds <- exp(logit)
prob <- odds / (1 + odds)
return(prob)
}
summary(exhw$prox.normal)
summary(exhw$proximity.km)
hw_logit_seq <- seq(0, 2, by = .5)
prob_seq <- round(logit2prob(logit_seq), 3)
prob_seq <- round(logit2prob(hw_logit_seq), 3)
prob_seq
logit2prob(coef(aicu.hw.2))
exp(coef(aicu.hw.2))
exp(coef(aicu.hw.2))
aicu.hw.2coef <- coef(aicu.hw.2)
aicu.hw.2coef
aicu.hw.2coef <- data.frame(coef(aicu.hw.2))
aicu.hw.2coef
aicu.hw.2coef <- rev(data.frame(coef(aicu.hw.2)))
aicu.hw.2coef
aicu.hw.2coef <- t(data.frame(coef(aicu.hw.2)))
aicu.hw.2coef
aicu.hw.2coef <- data.frame(t(coef(aicu.hw.2)))
aicu.hw.2coef$X.Intercept.
coefs <- data.frame(t(coef(aicu.hw.2)))
predict(aicu.hw.2)
predict(aicu.hw.2)
predict(aicu.hw.2, type = "response")
#winter, 0km
exp(coefs$X.Intercept. + coefs$seasonMonsoon*0
+ coefs$proximity.km*0)/
(1+(exp(coefs$X.Intercept.+coefs$seasonMonsoon*0
+ coefs$proximity.km*0)))
#monsoon, 0km
exp(coefs$X.Intercept. + coefs$seasonMonsoon*1
+ coefs$proximity.km*0)/
(1+(exp(coefs$X.Intercept.+coefs$seasonMonsoon*1
+ coefs$proximity.km*0)))
#monsoon, 0km
exp(coefs$X.Intercept. + coefs$seasonMonsoon*1
+ coefs$proximity.km*2)/
(1+(exp(coefs$X.Intercept.+coefs$seasonMonsoon*1
+ coefs$proximity.km*2)))
#winter, .5km
exp(coefs$X.Intercept. + coefs$seasonMonsoon*0
+ coefs$proximity.km*.5)/
(1+(exp(coefs$X.Intercept.+coefs$seasonMonsoon*0
+ coefs$proximity.km*.5)))
#winter, 0km
exp(coefs$X.Intercept. + coefs$seasonMonsoon*0
+ coefs$proximity.km*0)/
(1+(exp(coefs$X.Intercept.+coefs$seasonMonsoon*0
+ coefs$proximity.km*0)))
#winter, .5km
exp(coefs$X.Intercept. + coefs$seasonMonsoon*0
+ coefs$proximity.km*.5)/
(1+(exp(coefs$X.Intercept.+coefs$seasonMonsoon*0
+ coefs$proximity.km*.5)))
#winter, 1km
exp(coefs$X.Intercept. + coefs$seasonMonsoon*0
+ coefs$proximity.km*1)/
(1+(exp(coefs$X.Intercept.+coefs$seasonMonsoon*0
+ coefs$proximity.km*1)))
#winter, 1.5km
exp(coefs$X.Intercept. + coefs$seasonMonsoon*0
+ coefs$proximity.km*1.5)/
(1+(exp(coefs$X.Intercept.+coefs$seasonMonsoon*0
+ coefs$proximity.km*1.5)))
#winter, 2km
exp(coefs$X.Intercept. + coefs$seasonMonsoon*0
+ coefs$proximity.km*2)/
(1+(exp(coefs$X.Intercept.+coefs$seasonMonsoon*0
+ coefs$proximity.km*2)))
exhw[exhw$standard=="AI"&exhw$analyte=="Cu",]$exceedance/exhw[exhw$standard=="AI"&exhw$analyte=="Cu",]
exhw[exhw$standard=="AI"&exhw$analyte=="Cu",]$exceedance/exhw[exhw$standard=="AI"&exhw$analyte=="Cu",]$proximity.km
#predict gives the predicted value in terms of logits
plot.dat <- data.frame(prob = exhw[exhw$standard=="AI"&exhw$analyte=="Cu",]$exceedance/exhw[exhw$standard=="AI"&exhw$analyte=="Cu",]$prox.normal,
proximity = exhw[exhw$standard=="AI"&exhw$analyte=="Cu",]$prox.normal,
fit = predict(aicu.hw.2, exhw[exhw$standard=="AI"&exhw$analyte=="Cu",]))
View(plot.dat)
#convert those logit values to probabilities
plot.dat$fit_prob <- exp(plot.dat$fit)/(1+exp(plot.dat$fit))
ggplot(plot.dat, aes(x=proximity, y=prob)) +
geom_point() +
geom_line(aes(x=proximity, y=fit_prob))
logit2prob(coefs$X.Intercept.
+ coefs$seasonMonsoon*1
+ coefs$proximity.km*0)
#monsoon, 0km
exp(coefs$X.Intercept. + coefs$seasonMonsoon*1
+ coefs$proximity.km*0)/
(1+(exp(coefs$X.Intercept.+coefs$seasonMonsoon*1
+ coefs$proximity.km*0)))
coefs$X.Intercept.
+ coefs$seasonMonsoon*1
+ coefs$proximity.km*0
coefs$X.Intercept.+ coefs$seasonMonsoon*1+ coefs$proximity.km*0
exp(5)
exp(5)/exp(6)
exp(5)/149
logit2prob(coefs$X.Intercept.
+ coefs$seasonMonsoon*0
+ coefs$proximity.km*0)
#winter, 0km
exp(coefs$X.Intercept. + coefs$seasonMonsoon*0
+ coefs$proximity.km*0)/
(1+(exp(coefs$X.Intercept.+coefs$seasonMonsoon*0
+ coefs$proximity.km*0)))
plot(allEffects(aicu.hw.2, typical=median))
logit2prob(coefs$X.Intercept.
+ coefs$seasonMonsoon*0
+ coefs$proximity.km*1.5)
logit2prob(coefs$X.Intercept.
+ coefs$seasonMonsoon*1
+ coefs$proximity.km*1.5)
### hw ----
aicu.hw.0 <- glm(data = exhw[exhw$standard=="AI"&exhw$analyte=="Cu",],
exceedance ~ 1,
family = "binomial")
#maximal.hw model
aicu.hw.1 <- glm(data = exhw[exhw$standard=="AI"&exhw$analyte=="Cu",],
exceedance ~ prox.normal + season,
family = "binomial")
summary(aicu.hw.1)
vif(aicu.hw.1)
check_model(aicu.hw.1)
exp(coef(aicu.hw.1))
performance(aicu.hw.1)
aicu.hw.2 <- stepAIC(aicu.hw.0,scope = list(upper=aicu.hw.1), direction="both", trace = T)
summary(aicu.hw.2) #both variables significant with a trend that makes sense
plot(Effect(focal.predictors = c("prox.normal","season"),
mod = aicu.hw.2,
xlevels=list(prox.normal=seq(0, .5, 1, 1.5,2))),
multiline = TRUE)
plot(Effect(focal.predictors = c("prox.normal","season"),
mod = aicu.hw.2,
xlevels=list(prox.normal=seq(0, 2, .5))),
multiline = TRUE)
logit2prob(coefs$X.Intercept.
+ coefs$seasonMonsoon*0
+ coefs$prox.normal*0)
coefs <- data.frame(t(coef(aicu.hw.2)))
#winter, 0km
exp(coefs$X.Intercept. + coefs$seasonMonsoon*0
+ coefs$prox.normal*0)/
(1+(exp(coefs$X.Intercept.+coefs$seasonMonsoon*0
+ coefs$prox.normal*0)))
#winter, .5km
exp(coefs$X.Intercept. + coefs$seasonMonsoon*0
+ coefs$prox.normal*.5)/
(1+(exp(coefs$X.Intercept.+coefs$seasonMonsoon*0
+ coefs$prox.normal*.5)))
#winter, 1km
exp(coefs$X.Intercept. + coefs$seasonMonsoon*0
+ coefs$prox.normal*1)/
(1+(exp(coefs$X.Intercept.+coefs$seasonMonsoon*0
+ coefs$prox.normal*1)))
#winter, 1.5km
exp(coefs$X.Intercept. + coefs$seasonMonsoon*0
+ coefs$prox.normal*1.5)/
(1+(exp(coefs$X.Intercept.+coefs$seasonMonsoon*0
+ coefs$prox.normal*1.5)))
#winter, 2km
exp(coefs$X.Intercept. + coefs$seasonMonsoon*0
+ coefs$prox.normal*2)/
(1+(exp(coefs$X.Intercept.+coefs$seasonMonsoon*0
+ coefs$prox.normal*2)))
#monsoon, 0km
exp(coefs$X.Intercept. + coefs$seasonMonsoon*1
+ coefs$prox.normal*0)/
(1+(exp(coefs$X.Intercept.+coefs$seasonMonsoon*1
+ coefs$prox.normal*0)))
#correlation ----
# Function to generate a positive definite covariance matrix
generate_positive_definite_cov_matrix <- function(n_features, sparsity) {
# Generate a random sparse covariance matrix
cov_matrix <- matrix(0, n_features, n_features)
non_zero_entries <- sample(1:(n_features^2), sparsity)
cov_matrix[non_zero_entries] <- runif(sparsity, 0.1, 0.5)
cov_matrix <- Matrix::nearPD(cov_matrix)$mat  # Ensure positive definiteness
return(cov_matrix)
}
# Set random seed for reproducibility
set.seed(123)
# Number of samples and features
n_samples_pca <- 515
n_features <- 20
sparsity <- 400  # Number of non-zero entries in the covariance matrix
# Generate a positive definite covariance matrix with sparsity
true_cov_matrix <- generate_positive_definite_cov_matrix(n_features, sparsity)
# Generate correlated data using the covariance matrix
background_df <- mvrnorm(n_samples, mu = rep(0, n_features), Sigma = true_cov_matrix)
#load libraries
library(elasticnet)
library(scPCA)
library(sparsepca)
# Load necessary libraries
library(sparsepca)
library(MASS)  # For generating multivariate normal data
library(caret)  # For cross-validation
library(ggplot2)
library(glmnet)
library(elasticnet)  # Load the elasticnet package for sparse PCA
library(matrixcalc)  # Load necessary library for nearestPD function
library(Matrix)
library(scPCA)
library(dplyr)
# Generate correlated data using the covariance matrix
background_df <- mvrnorm(n_samples, mu = rep(0, n_features), Sigma = true_cov_matrix)
# Generate correlated data using the covariance matrix
background_df <- mvrnorm(n_samples_pca, mu = rep(0, n_features), Sigma = true_cov_matrix)
background_df <- data.frame(background_df)
view(background_df)
View(background_df)
rdat <- data.frame(As = rnorm(n=20, mean=5, sd=10),
Al = rnorm(n=20, mean=5, sd=10),
Zn = rnorm(n=20, mean=5, sd=10),
Fe = rnorm(n=20, mean=5, sd=10),
Pb = rnorm(n=20, mean=5, sd=10),
Cd = rnorm(n=20, mean=5, sd=10))
rdat <- data.frame(As = rnorm(n=515, mean=1.5, sd=4.5),
Al = rnorm(n=515, mean=72, sd=433),
Zn = rnorm(n=515, mean=204, sd=890),
Fe = rnorm(n=515, mean=57, sd=147),
Pb = rnorm(n=515, mean=1.6, sd=13),
Cd = rnorm(n=515, mean=.18, sd=.88))
View(rdat)
write.csv(rdat, "fakedat.csv")
