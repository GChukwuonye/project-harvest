pli.ln ~ (1|community:site),
REML = T) #ML for comparison, REML for final
summary(pld0)
pld <- lmer(data = pli_dewey,
pli.ln ~  season + prox.normal + pH +
season:prox.normal
+ (1|site),
REML = F) #ML for comparison, REML for final
summary(pld)
pld.step <- step(pld)
pld.step
pld2 <- get_model(pld.step)
print(summary(pld2))
check_model(pld2)
anova(pld2)
print(anova(pld2))
performance(pld2)
print(summary(pld2))
performance(pld2)
pld2
#pli hayden modeling ----
pli_hayden<- iw.dm[iw.dm$community=="Hayden/Winkelman",]
pli_hayden<- pli_hayden%>%
drop_na(prox.normal)
pli_hayden<- pli_hayden%>%
drop_na(pli.ln)
pli_hayden<-pli_hayden%>%
drop_na(season)
pli_hayden<-pli_hayden%>%
drop_na(pH)
plh0 <- lmer(data =pli_hayden,
pli.ln ~ (1|community:site),
REML = T) #ML for comparison, REML for final
summary(plh0)
plh <- lmer(data = pli_hayden,
pli.ln ~  season + prox.normal + pH+ season:prox.normal
+ (1|site),
REML = F) #ML for comparison, REML for final
summary(plh)
plh.step <- step(plh)
plh.step
plh2 <- get_model(plh.step)
print(summary(plh2))
check_model(plh2)
vif(plh2)
anova(plh2)
print(anova(plh2))
performance(plh2)
plh2
#pli globe modeling ----
pli_globe<- iw.dm[iw.dm$community=="Globe/Miami",]
#pli globe modeling ----
pli_globe<- iw.dm[iw.dm$community=="Globe/Miami",]
pli_globe<- pli_globe%>%
drop_na(prox.normal)
pli_globe<- pli_globe%>%
drop_na(pli.ln)
pli_globe<-pli_globe%>%
drop_na(season)
pli_globe<-pli_globe%>%
drop_na(pH)
plg0 <- lmer(data =pli_globe,
pli.ln ~ (1|community:site),
REML = T) #ML for comparison, REML for final
summary(plg0)
plg <- lmer(data = pli_globe,
pli.ln ~  season + prox.normal + score_bin+
season:score_bin+
prox.normal:score_bin
+ (1|community:site),
REML = F) #ML for comparison, REML for final
plg <- lmer(data = pli_globe,
pli.ln ~  season + prox.normal+pH+ season:prox.normal
+ (1|community:site),
REML = F) #ML for comparison, REML for final
summary(plg)
plg.step <- step(plg)
plg.step
plg2 <- get_model(plg.step)
print(summary(plg2))
check_model(plg2)
anova(plg2)
print(anova(plg2))
performance(plg2)
#Kunal Palawat and Gift Chukwuonye
#Description: Script to load and clean up datasets for analysis. RUN THIS every time before coding.
#
#Load libraries====
library(readxl) #read excel files
library(tidyverse)
library(ggplot2)
library(table1)
#load data ----
#IW DM
iw.dm <- read_excel("/Users/gift/Documents/GitHub/WorkingFiles/data/data_processing/IW_DM_Y123.xlsx", sheet = "Corrected") #corrected means the corrected tab in the excel sheet
#wrangle data
#add period and season variables
iw.dm$period <- iw.dm$samplings
iw.dm$season <- iw.dm$samplings
#redefine them
iw.dm[iw.dm$period=="First Winter",]$period <- "First"
iw.dm[iw.dm$period=="Last Winter",]$period <- "Last"
iw.dm[iw.dm$period=="First Monsoon",]$period <- "First"
iw.dm[iw.dm$period=="Last Monsoon",]$period <- "Last"
iw.dm[iw.dm$season=="First Winter",]$season <- "Winter"
iw.dm[iw.dm$season=="Last Winter",]$season <- "Winter"
iw.dm[iw.dm$season=="First Monsoon",]$season <- "Monsoon"
iw.dm[iw.dm$season=="Last Monsoon",]$season <- "Monsoon"
iw.dm$year <- iw.dm$sampling_year
iw.dm[iw.dm$year=="2017-2018",]$year <- "Water Year 1"
iw.dm[iw.dm$year=="2018-2019",]$year <- "Water Year 2"
iw.dm[iw.dm$year=="2019-2020",]$year <- "Water Year 3"
#remove field blanks. to remove anything, type !="Value" to remove them.
iw.dm <- iw.dm[iw.dm$type!="B", ]
#remove ATS samples because ATS samples are not included in PH research.
iw.dm <- iw.dm[iw.dm$site!="ATS1", ]
#remove year 3 monsoon samples
iw.dm$ssnyear <- paste(iw.dm$season, iw.dm$year)
iw.dm <- iw.dm[iw.dm$ssnyear!="Monsoon Water Year 3", ]
#confirm correct order of categorical variables
#iw.dm$samplings <- factor(iw.dm$samplings, levels = c("FW", "LW", "FM", "LM"))
iw.dm$samplings <- factor(iw.dm$samplings, levels = c("First Winter", "Last Winter", "First Monsoon", "Last Monsoon"))
iw.dm$period <- factor(iw.dm$period, levels = c("First", "Last"))
iw.dm$season <- factor(iw.dm$season, levels = c("Winter", "Monsoon"))
iw.dm$sampling_year <- factor(iw.dm$sampling_year, levels = c("Water Year 1", "Water Year 2", "Water Year 3"))
iw.dm$community <- factor(iw.dm$community, levels = c("Dewey-Humboldt", "Globe/Miami", "Hayden/Winkelman", "Tucson"))
#pH and EC data----
#append pH and EC data
iw.pHec <- read_xlsx("/Users/gift/Documents/GitHub/WorkingFiles/data/data_clean/IW_pHEC_Y123.xlsx", sheet = 1, col_names = TRUE)
iw.pHec <- iw.pHec[iw.pHec$type!="B",] #removing field blanks
iw.dm <- full_join(iw.dm, iw.pHec, by = c("sample.name", "type")) #joins the phec data with the original iw.dm we had before
iw.dm <- iw.dm[!is.na(iw.dm$community),]
#add mining community vs urban community
iw.dm$landuse <- "Mining Community"
iw.dm[iw.dm$community=="Tucson",]$landuse <- "Urban Community"
#add proximity to point source ----
com <- read_xlsx("/Users/gift/Documents/GitHub/WorkingFiles/data/data_processing/LATLOGSITE.xlsx", sheet = "community", col_names = TRUE)
iw.dm <- full_join(iw.dm, com, by = c("site"))
iw.dm <- iw.dm[!is.na(iw.dm$mlod.name),]
#add pollution load index ----
pli <- read.csv("/Users/gift/Documents/GitHub/WorkingFiles/data/data_processing/pollution_load_selected_analytes.csv")
#pli <- read.csv("~/Documents/GitHub/ProjectHarvest/WorkingFiles/data/data_processing/pollution_load_selected_analytes.csv")
iw.dm$pli <- pli$pli_contaminants
iw.dm$pli.ln <- log(iw.dm$pli)
#outliers ----
#remove samples 19 and 39 from analysis because they were outliers based on MFA and remove all samples from H22 because they are a proximity outlier south of Winkelman
#G428IWA23-20190730 and H209IWA23-20190709
iw.dm <- iw.dm[-c(19,39),]
iw.dm <- iw.dm[iw.dm$site!="H222",]
#contamination factor=====
pli_dat<- pli[-c(19,39),]
pli_dat <- pli_dat[pli_dat$site!="H222",]
pli_short<-  pli_dat[, -c(15, 19, 25, 26, 28, 29)]
pli_dat2<- pivot_longer(pli_short,
cols = Be:Pb,
values_to = "contamination_factor",
names_to = "analytes")
#longer ----
iw.dm.long <- pivot_longer(iw.dm,
cols = Be:Pb,
values_to = "value",
names_to = "analyte")
#calculate natural log ----
iw.dm.long$ln_value <- log(iw.dm.long$value)
#create longer version to compare transformation
iw.dm.longer <- pivot_longer(data = iw.dm.long,
cols = c(value,ln_value),
names_to = "transformation",
values_to = "concentration")
iw.dm.longer[iw.dm.longer$transformation == "value",]$transformation <- "untransformed"
iw.dm.longer[iw.dm.longer$transformation == "ln_value",]$transformation <- "natural log"
iw.dm.longer$transformation <- as.factor(iw.dm.longer$transformation)
#create natural log dataframes for analysis
iw.ln.dm.long <- subset(iw.dm.long, select = -c(value))
iw.ln.dm <- pivot_wider(data = iw.ln.dm.long,
values_from = "ln_value",
names_from ="analyte")
#Home description survey ----
hds <- read_excel("/Users/gift/Documents/GitHub/WorkingFiles/data/data_processing/IO_HDS.xlsx")
#hds <- read_excel("~/Documents/GitHub/ProjectHarvest/WorkingFiles/data/data_processing/IO_HDS.xlsx")
#load in data and if there is a missing value, assume participant does not follow best practices - conservative estimate. No is a zero. Yes is a 1
#assumption: if there is a missing value, we assume a participant does not follow best practices to use a risk-averse analysis framework
#assumption: this index assumes equal influence of each best practice on rainwater quality
#assumption/limitation: we assume that the maintenance intervention reported was consistent across the duration of the study
#assumption: sites with no HDS survey were assumed to have maintenance scores of 0/None.
##Q67 Do you clean parts of your roof draining system (like the debris filter, gutters, scuppers, etc.)? ----
hds67<- hds
hds67$Q67 <- as.character(hds67$Q67)
#hds67[is.na(hds67$Q67),]$Q67 <- "0"
hds67 <- hds67 %>%
drop_na(Q67)
hds67[hds67$Q67=="0",]$Q67 <- "0"
hds67[hds67$Q67=="1",]$Q67 <- "1"
hds67[hds67$Q67=="2",]$Q67 <- "0"
hds67$Q67 <- as.numeric(hds67$Q67)
summary(as.factor(hds67$Q67))
##Q71 Do you treat or wash your cistern with anything? ----
hds71<- hds
hds71$Q71 <- as.character(hds$Q71)
hds71 <- hds71 %>%
drop_na(Q71)
#hds[is.na(hds$Q71),]$Q71 <- "0"
hds71[hds71$Q71=="0",]$Q71 <- "0"
hds71[hds71$Q71=="1",]$Q71 <- "1"
hds71[hds71$Q71=="2",]$Q71 <- "0"
hds71$Q71 <- as.numeric(hds71$Q71)
summary(as.factor(hds71$Q71))
##Q76 Does your cistern have a first flush? ----
hds76<- hds
hds76$Q76 <- as.character(hds76$Q76)
hds76 <- hds76 %>%
drop_na(Q76)
#hds76[is.na(hds76$Q76),]$Q76 <- "0"
hds76[hds76$Q76=="0",]$Q76 <- "0"
hds76[hds76$Q76=="1",]$Q76 <- "1"
hds76[hds76$Q76=="2",]$Q76 <- "0"
hds76[hds76$Q76=="3",]$Q76 <- "0"
hds76$Q76 <- as.numeric(hds76$Q76)
summary(as.factor(hds76$Q76))
##Q77 Does your cistern have a screen/filter for incoming water from down spout on top of the tank? ----
hds77<- hds
hds77$Q77 <- as.character(hds77$Q77)
hds77 <- hds77 %>%
drop_na(Q77)
#hds77[is.na(hds77$Q77),]$Q77 <- "0"
hds77[hds77$Q77=="0",]$Q77 <- "0"
hds77[hds77$Q77=="1",]$Q77 <- "1"
hds77[hds77$Q77=="2",]$Q77 <- "0"
hds77[hds77$Q77=="3",]$Q77 <- "0"
hds77$Q77 <- as.numeric(hds77$Q77)
summary(as.factor(hds77$Q77))
hds79<- hds
hds79$Q79 <- as.character(hds79$Q79)
hds79 <- hds79 %>%
drop_na(Q79)
#hds79[is.na(hds79$Q79),]$Q79 <- "0"
hds79[hds79$Q79=="0",]$Q79 <- "0"
hds79[hds79$Q79=="1",]$Q79 <- "0"
hds79[hds79$Q79=="2",]$Q79 <- "1"
hds79[hds79$Q79=="100",]$Q79 <- "0"
hds79$Q79 <- as.numeric(hds79$Q79)
summary(as.factor(hds79$Q79))
#iw.dm <- full_join(iw.dm, hds, by = c("site"))
#iw.dm67- combining iw.dm with Q67=====
iw.dm67 <- full_join(iw.dm, hds67, by = c("site"))
iw.dm67 <- iw.dm67[!is.na(iw.dm67$community),]
iw.dm67<-iw.dm67 %>%
drop_na(Q67)
#iw.dm71- combining iw.dm with Q71=====
iw.dm71 <- full_join(iw.dm, hds71, by = c("site"))
iw.dm71 <- iw.dm71[!is.na(iw.dm71$community),]
iw.dm71<-iw.dm71 %>%
drop_na(Q71)
#iw.dm76- combining iw.dm with Q76=====
iw.dm76 <- full_join(iw.dm, hds76, by = c("site"))
iw.dm76 <- iw.dm76[!is.na(iw.dm76$community),]
iw.dm76<-iw.dm76 %>%
drop_na(Q76)
#iw.dm77- combining iw.dm with Q77=====
iw.dm77 <- full_join(iw.dm, hds77, by = c("site"))
iw.dm77 <- iw.dm77[!is.na(iw.dm77$community),]
iw.dm77<-iw.dm77 %>%
drop_na(Q77)
#iw.dm79- combining iw.dm with Q79=====
iw.dm79 <- full_join(iw.dm, hds79, by = c("site"))
iw.dm79 <- iw.dm79[!is.na(iw.dm79$community),]
iw.dm79<-iw.dm79 %>%
drop_na(Q79)
#Summaries ----
contam_list <- list("Al", "Sb", "As", "Ba", "Be", "Cd", "Cr", "Co", "Cu", "Fe", "Pb", "Mn", "Mo", "Ni", "Se", "Ag", "Sn", "V", "Zn")
#distributions
lapply(X = contam_list,
FUN = violintransFX,
dataDF = iw.dm.longer,
type.string = "iw",
subset.string = "community",
subset.title.string = "Community",
facet.string = "transformation",
facet.title.string = "",
units.string = "ln(mg/kg) and (mg/kg)")
library(car)
library(readxl)
library(tidyverse)
library(ggplot2)
library(EnvStats)
library(lme4)
library(lmerTest)
library(performance)
library(effects)
library(ggeffects)
library(ggpubr)
library(emmeans)
library(multcomp)
library(patchwork)
#Q67====
#Do you clean parts of your roof draining system (like the debris filter, gutters, scuppers, etc.)?
pli_tucson67<- iw.dm67[iw.dm67$community=="Tucson",]
pli_tucson67 <- pli_tucson67 %>%
drop_na(prox.normal)
pli_tucson67 <- pli_tucson67 %>%
drop_na(season)
tuc0<- lmer(data = pli_tucson67,
pli.ln ~ (1|community:site),
REML = T) #ML for comparison, REML for final
summary(tuc0)
tuc1<- lmer(data= pli_tucson67,
pli.ln~ season+ prox.normal+ Q67+
(1|community:site),
REML = F) #ML for comparison, REML for final
tuc.step <- step(tuc1, direction= "both")
#pli without hds=====
#tucson=====
pli_tucson<- iw.dm[iw.dm$community=="Tucson",]
pli_tucson<- pli_tucson%>%
drop_na(prox.normal)
pli_tucson<- pli_tucson%>%
drop_na(pli.ln)
pli_tucson<- pli_tucson%>%
drop_na(season)
pli_tucson<- pli_tucson%>%
drop_na(pH)
plt0 <- lmer(data = pli_tucson,
pli.ln ~ (1|community:site),
REML = T)
plt2 <- lmer(data = pli_tucson,
pli.ln ~  season + prox.normal + season:prox.normal+ pH+
(1|site),
REML = F)
plt.step <- step(plt2)
plt.step
plt3 <- get_model(plt.step)
print(summary(plt3))
check_model(plt3)
anova(plt3)
print(anova(plt3))
performance(plt3)
anova(plt3)
performance(plt3)
ggplot(data = pli_tucson, mapping = aes(y = log(value), x = nearest.dist.km)) +
geom_point(size = 1)+
facet_wrap(analyte~., scales = "free") #ln transformed just to be able to compare better
View(pli_tucson)
View(iw.dm.long)
View(haydendat)
View(haydendat)
#globe ----
globe <- read_xlsx("~/Documents/GitHub/ProjectHarvest/WorkingFiles/data/data_processing/LATLOGSITE.xlsx", sheet = "globe", col_names = TRUE)
gdat <- iw.dm.long[iw.dm.long$community=="Globe/Miami",]
globedat <- full_join(gdat, globe, by = c("site"))
globedat <- globedat[!is.na(globedat$community),]
globedat <- globedat[!is.na(globedat$location),]
globedat$location <- factor(globedat$location, levels = c("Claypool", "Globe District Two", "Globe District Three", "Globe District Four", "Globe District Five", "Globe District Six", "Globe District One", "Miami", "Central Heights-Midland City", "Icehouse Canyon", "Six Shooter Canyon"))
globedat$location_2 <- factor(globedat$location_2, levels = c("Miami/Claypool Area", "Globe Area", "Canyons Area"))
globedat$nearest.dist.km <- globedat$nearest.dist.rounded/1000
#graph to viz associations by source
ggplot(data = globedat, mapping = aes(y = log(value), x = nearest.dist.km)) +
geom_point(size = 1)+
facet_wrap(analyte~., scales = "free") #ln transformed just to be able to compare better
#load water data from contaminant descriptions file, subset hayden/winkelman data only
hayden <- iw.dm.long[iw.dm.long$community=="Hayden/Winkelman",]
#assign water samples pre and post strike
hayden$collection_date <- substr(hayden$sample.name, 11, 18) #subset sample name to create collection date
hayden$strike <- as.numeric(hayden$collection_date) #make numeric
hayden[hayden$strike<20191013,]$strike <- 0 #assign pre strike values 0
hayden[hayden$strike>=20191013,]$strike <- 1 #assign post strike values 1
hayden$strike <- as.factor(hayden$strike) #make factor
hayden$strike <- ifelse(hayden$strike==0, "Operating", "Not Operating") #label with words
hayden$strike <- factor(hayden$strike, levels = c("Operating", "Not Operating")) #order the labels
#load hayden distance data
hdistance <- read_xlsx("~/Documents/GitHub/ProjectHarvest/WorkingFiles/data/data_processing/LATLOGSITE.xlsx", sheet = "hayden", col_names = TRUE)
hdistance <- subset(hdistance, select = c("site", "siteID", "distance.rounded", "location", "distance.to.tailings.round", "dist.tailings.km"))
#merge with water and soil data by site
haydendat <- full_join(hayden, hdistance, by = c("site"))
#remove rows without data
haydendat <- haydendat[!is.na(haydendat$community),]
haydendat$direction <- factor(haydendat$location, levels = c("Hayden", "Winkelman"))
#remove kit H222
haydendat <- haydendat[haydendat$site!="H222",]
#subset winter data because only winter data exists post strike
haydendat.winter <- haydendat[haydendat$season=="Winter",]
#distance from smelter smoke stack
haydendat$distance.rounded.km <- haydendat$distance.rounded/1000
haydendat.long <- pivot_longer(data = haydendat,
cols = c("distance.rounded.km","dist.tailings.km"),
values_to = "dist.rounded.km",
names_to = "source")
haydendat.long$dist.rounded.km <- as.numeric(haydendat.long$dist.rounded.km)
haydendat.long[haydendat.long$source=="distance.rounded.km",]$source <- "Smelter"
haydendat.long[haydendat.long$source=="dist.tailings.km",]$source <- "Tailings"
haydendat.long$source <- factor(haydendat.long$source, levels = c("Tailings", "Smelter"))
#graph to viz associations by source
ggplot(data = haydendat.long, mapping = aes(y = log(value), x = dist.rounded.km, color = source)) +
geom_point(size = 1)+
facet_wrap(analyte~., scales = "free") #ln transformed just to be able to compare better
ggplot(data = pli_tucson, mapping = aes(y = log(pli), x = nearest.dist.km)) +
geom_point(size = 1)+
facet_wrap(analyte~., scales = "free") #ln transformed just to be able to compare better
ggplot(data = pli_tucson, mapping = aes(y = log(pli), x = nearest.dist.km)) +
geom_point(size = 1)+
facet_wrap(scales = "free") #ln transformed just to be able to compare better
ggplot(data = iw.dm.long, mapping = aes(y = log(pli), x = nearest.dist.km)) +
geom_point(size = 1)+
facet_wrap(community~., scales = "free") #ln transformed just to be able to compare better
View(iw.dm.long)
ggplot(data = iw.dm.long, mapping = aes(y = log(pli), x = prox.normal)) +
geom_point(size = 1)+
facet_wrap(community~., scales = "free") #ln transformed just to be able to compare better
iws.tu <- iws.tu %>%
drop_na(prox.normal)
#initial viz----
ggplot(iw.score.long, mapping = aes(y = log(concentration), x = score_bin, fill = community)) +
geom_boxplot() +
#scale_fill_manual(values = wes_palette(name = "Darjeeling2", n = 5)) +
scale_fill_manual(values=c("#F9A785", "#00A8C6", "#95CACA","#4068B2"))+
#scale_fill_viridis_d() +
facet_grid(.~analyte, scales = "free") +
labs(x = "\nMaintenance Score",
y = "[analyte] (ln(ug/L))\n",
title = "Boxplots of maintenance score by analyte",
fill = "")+
theme_bw() +
theme(text = element_text(family = "Avenir", size = 15),
plot.title = element_text(hjust=.5, face = "bold"),
plot.subtitle = element_text(hjust=.5),
axis.text = element_text(vjust = .5, color = "black"),
axis.text.x = element_text(angle = 90, vjust = .5, hjust = 1),
legend.position="bottom",
panel.grid.minor = element_blank(),
panel.grid.major.x = element_blank(),
strip.background = element_rect(fill = "white"),
axis.line.y = element_blank(),
axis.line.x = element_blank())
#write graph
p <- ggplot(data = dat,
mapping = aes_string(y = analyte, x = subset, fill = subset)) +
geom_violin() +
geom_jitter(color="black", size=0.7, alpha=0.25) +
labs(title = paste(analyte,"Concentrations by", subset.title, "and", fac.title),
fill = "",
x = paste("\n",subset.title),
y = paste("[",analyte,"] ",units,"\n", sep="")) +
scale_fill_viridis_d()+
# scale_y_reverse()+
facet_wrap(facets = as.formula(paste("~", fac)),scales = "free")+
theme_bw() +
theme(text = element_text(family = "Avenir", size = 15),
plot.title = element_text(hjust=.5, face = "bold"),
plot.subtitle = element_text(hjust=.5),
axis.text = element_text(vjust = .5, color = "black"),
axis.text.x = element_text(),
legend.position="none",
panel.grid.minor = element_blank(),
panel.grid.major.x = element_blank(),
axis.line.y = element_blank(),
axis.line.x = element_blank())
print(p)
ggplot(data = iw.dm.long, mapping = aes(y = log(pli), x = prox.normal)) +
geom_point(size = 1)+
facet_wrap(community~., scales = "free")+
geom_line(aes(x=prox.normal, y=fit_prob))
ggplot(data = iw.dm.long, mapping = aes(y = log(pli), x = prox.normal)) +
geom_point(size = 1)+
facet_wrap(community~., scales = "free")+
geom_line()
ggplot(data = iw.dm.long, mapping = aes(y = log(pli), x = prox.normal)) +
geom_point(size = 1)+
facet_wrap(community~., scales = "free")+
stat_smooth(method=lm)
ggplot(data = iw.dm.long, mapping = aes(y = log(pli), x = prox.normal)) +
geom_point(size = 2, color= "blue")+
facet_wrap(community~., scales = "free")+
stat_smooth(method=lm)
ggplot(data = iw.dm.long, mapping = aes(y = log(pli), x = prox.normal)) +
geom_point(size = 1, color= "blue", shape= hollow)+
facet_wrap(community~., scales = "free")+
stat_smooth(method=lm)
ggplot(data = iw.dm.long, mapping = aes(y = log(pli), x = prox.normal)) +
geom_point(size = 1, color= "blue")+
facet_wrap(community~., scales = "free")+
stat_smooth(method=lm)
ggplot(data = iw.dm.long, mapping = aes(y = log(pli), x = season)) +
geom_point(size = 1, color= "green")+
facet_wrap(community~., scales = "free")+
stat_smooth(method=lm)
ggplot(data = iw.dm.long, mapping = aes(y = log(pli), x = season)) +
geom_boxplot(color= "green")+
facet_wrap(community~., scales = "free")+
stat_smooth(method=lm)
ggplot(data = iw.dm.long, mapping = aes(y = log(pli), x = season)) +
geom_boxplot()+
facet_wrap(community~., scales = "free")+
stat_smooth(method=lm)
ggplot(data = iw.dm.long, mapping = aes(y = log(pli), x = season)) +
geom_boxplot(fill= "blue", "green", "red", "purple")+
facet_wrap(community~., scales = "free")+
stat_smooth(method=lm)
ggplot(data = iw.dm.long, mapping = aes(y = log(pli), x = season)) +
geom_boxplot(color= "blue", "green", "red", "purple")+
facet_wrap(community~., scales = "free")+
stat_smooth(method=lm)
ggplot(data = iw.dm.long, mapping = aes(y = log(pli), x = pH)) +
geom_point(size = 1, color= "blue")+
facet_wrap(community~., scales = "free")+
stat_smooth(method=lm)
ggplot(data = iw.dm.long, mapping = aes(y = log(pli), x = pH)) +
geom_point(size = 1, color= "green")+
facet_wrap(community~., scales = "free")+
stat_smooth(method=lm)
ggplot(data = iw.dm.long, mapping = aes(y = log(pli), x = pH)) +
geom_point(size = 1, color= "green")+
facet_wrap(community~., scales = "free")+
stat_smooth(method=lm,color= "black")
