names_to = "tailings")
dat.long[dat.long$tailings=="edist.rounded",]$tailings <- "Eastern Tailings"
dat.long[dat.long$tailings=="wdist.rounded",]$tailings <- "Western Tailings"
dat.long$tailings <- factor(dat.long$tailings, levels = c("Western Tailings", "Eastern Tailings"))
dat$edist.rounded.km <- dat$edist.rounded/1000
dat$wdist.rounded.km <- dat$wdist.rounded/1000
#load data ----
#IW DM
dewey <- read_xlsx("~/Documents/GitHub/ProjectHarvest/WorkingFiles/data/data_processing/LATLOGSITE.xlsx", sheet = "dewey", col_names = TRUE)
dat <- iw.dm.long[iw.dm.long$community=="Dewey-Humboldt",]
deweydat <- full_join(dat, dewey, by = c("site"))
deweydat <- deweydat[!is.na(deweydat$community),]
deweydat <- deweydat[!is.na(deweydat$location),]
deweydat$analyte.ln <- log(deweydat$value)
deweydat$location<- factor(deweydat$location, levels = c("South", "East", "North East", "North", "North West"))
# deweydat.edist <- deweydat[!is.na(deweydat$edist.rounded),]
# deweydat.wdist <- deweydat[!is.na(deweydat$wdist.rounded),]
deweydat.long <- pivot_longer(deweydata = deweydat,
cols = edist.rounded:wdist.rounded,
values_to = "dist.rounded",
names_to = "tailings")
deweydat.long[deweydat.long$tailings=="edist.rounded",]$tailings <- "Eastern Tailings"
# deweydat.edist <- deweydat[!is.na(deweydat$edist.rounded),]
# deweydat.wdist <- deweydat[!is.na(deweydat$wdist.rounded),]
deweydat.long <- pivot_longer(data = deweydat,
cols = edist.rounded:wdist.rounded,
values_to = "dist.rounded",
names_to = "tailings")
deweydat.long[deweydat.long$tailings=="edist.rounded",]$tailings <- "Eastern Tailings"
deweydat.long[deweydat.long$tailings=="wdist.rounded",]$tailings <- "Western Tailings"
deweydat.long$tailings <- factor(deweydat.long$tailings, levels = c("Western Tailings", "Eastern Tailings"))
deweydat$edist.rounded.km <- deweydat$edist.rounded/1000
deweydat$wdist.rounded.km <- deweydat$wdist.rounded/1000
View(deweydat)
ggplot(data = deweydat.long, mapping = aes(y = analyte.ln, x = tailings)) +
geom_point(size = 1)+
facet_wrap(analyte~., scales = "free") #ln transformed just to be able to compare better
ggplot(data = deweydat.long, mapping = aes(y = analyte.ln, x = dist.rounded)) +
geom_point(size = 1)+
facet_wrap(analyte~tailings, scales = "free") #ln transformed just to be able to compare better
ggplot(data = deweydat.long, mapping = aes(y = analyte.ln, x = dist.rounded, color = tailings)) +
geom_point(size = 1)+
facet_wrap(analyte~., scales = "free") #ln transformed just to be able to compare better
ggplot(data = deweydat.long, mapping = aes(y = analyte.ln, x = dist.rounded/1000, color = tailings)) +
geom_point(size = 1)+
facet_wrap(analyte~., scales = "free") #ln transformed just to be able to compare better
#globe
globe <- read_xlsx("~/Documents/GitHub/ProjectHarvest/WorkingFiles/data/data_processing/LATLOGSITE.xlsx", sheet = "globe", col_names = TRUE)
#globe
globe <- read_xlsx("~/Documents/GitHub/ProjectHarvest/WorkingFiles/data/data_processing/LATLOGSITE.xlsx", sheet = "globe", col_names = TRUE)
gdat <- iw.dm[iw.dm$community=="Globe/Miami",]
globedat <- full_join(gdat, globe, by = c("site"))
globedat <- globedat[!is.na(globedat$community),]
globedat <- globedat[!is.na(globedat$location.y),]
View(globedat)
globedat <- globedat[!is.na(globedat$location),]
globedat$location <- factor(globedat$location, levels = c("Claypool", "Globe District Two", "Globe District Three", "Globe District Four", "Globe District Five", "Globe District Six", "Globe District One", "Miami", "Central Heights-Midland City", "Icehouse Canyon", "Six Shooter Canyon"))
globedat$location_2 <- factor(globedat$location_2, levels = c("Miami/Claypool Area", "Globe Area", "Canyons Area"))
globedat$nearest.dist.km <- globedat$nearest.dist.rounded/1000
gdat <- iw.dm.long[iw.dm.long$community=="Globe/Miami",]
globedat <- full_join(gdat, globe, by = c("site"))
globedat <- globedat[!is.na(globedat$community),]
globedat <- globedat[!is.na(globedat$location),]
globedat$location <- factor(globedat$location, levels = c("Claypool", "Globe District Two", "Globe District Three", "Globe District Four", "Globe District Five", "Globe District Six", "Globe District One", "Miami", "Central Heights-Midland City", "Icehouse Canyon", "Six Shooter Canyon"))
globedat$location_2 <- factor(globedat$location_2, levels = c("Miami/Claypool Area", "Globe Area", "Canyons Area"))
globedat$nearest.dist.km <- globedat$nearest.dist.rounded/1000
ggplot(data = globedat, mapping = aes(y = log(value), x = nearest.dist.km)) +
geom_point(size = 1)+
facet_wrap(analyte~., scales = "free") #ln transformed just to be able to compare better
ggplot(data = globedat, mapping = aes(y = value, x = nearest.dist.km)) +
geom_point(size = 1)+
facet_wrap(analyte~., scales = "free") #ln transformed just to be able to compare better
#load water data from contaminant descriptions file, subset hayden/winkelman data only
hayden <- iw.dm[iw.dm$community=="Hayden/Winkelman",]
#load water data from contaminant descriptions file, subset hayden/winkelman data only
hayden <- iw.dm.long[iw.dm.long$community=="Hayden/Winkelman",]
#assign water samples pre and post strike
hayden$collection_date <- substr(hayden$sample.name, 11, 18) #subset sample name to create collection date
hayden$strike <- as.numeric(hayden$collection_date) #make numeric
hayden[hayden$strike<20191013,]$strike <- 0 #assign pre strike values 0
hayden[hayden$strike>=20191013,]$strike <- 1 #assign post strike values 1
hayden$strike <- as.factor(hayden$strike) #make factor
hayden$strike <- ifelse(hayden$strike==0, "Operating", "Not Operating") #label with words
hayden$strike <- factor(hayden$strike, levels = c("Operating", "Not Operating")) #order the labels
#load hayden distance data
hdistance <- read_xlsx("~/Documents/GitHub/ProjectHarvest/WorkingFiles/data/data_processing/LATLOGSITE.xlsx", sheet = "hayden", col_names = TRUE)
hdistance <- subset(hdistance, select = c("site", "siteID", "distance.rounded", "location", "distance.to.tailings.round", "dist.tailings.km"))
#merge with water and soil data by site
haydendat <- full_join(hayden, hdistance, by = c("site"))
#remove rows without data
haydendat <- haydendat[!is.na(haydendat$community),]
View(haydendat)
haydendat$direction <- factor(haydendat$location, levels = c("Hayden", "Winkelman"))
haydendat$distance.rounded.km <- haydendat$distance.rounded/1000
haydendat <- haydendat[haydendat$site!="H222",]
#subset winter data because only winter data exists post strike
haydendat.winter <- haydendat[haydendat$season=="Winter",]
haydendat.long <- pivot_longer(data = haydendat,
cols = c("distance.rounded.km","dist.tailings.km"),
values_to = "dist.rounded.km",
names_to = "source")
haydendat.long[haydendat.long$source=="distance.rounded.km",]$tailings <- "Smelter"
haydendat.long[haydendat.long$source=="distance.rounded.km",]$source <- "Smelter"
haydendat.long[haydendat.long$source=="dist.tailings.km",]$source <- "Tailings"
haydendat.long$source <- factor(haydendat.long$source, levels = c("Tailings", "Smelter"))
haydendat.long <- pivot_longer(data = haydendat,
cols = c("distance.rounded.km","dist.tailings.km"),
values_to = "dist.rounded.km",
names_to = "source")
haydendat.long[haydendat.long$dist.rounded.km=="distance.rounded.km",]$source <- "Smelter"
haydendat.long[haydendat.long$dist.rounded.km=="dist.tailings.km",]$source <- "Tailings"
haydendat.long$source <- factor(haydendat.long$source, levels = c("Tailings", "Smelter"))
#graph to viz associations by source
ggplot(data = haydendat.long, mapping = aes(y = value, x = dist.rounded.km, color = source)) +
geom_point(size = 1)+
facet_wrap(analyte~., scales = "free") #ln transformed just to be able to compare better
#graph to viz associations by source
ggplot(data = haydendat.long, mapping = aes(y = value, x = dist.rounded.km, color = source)) +
geom_point(size = 1)+
facet_wrap(analyte~., scales = "free") #ln transformed just to be able to compare better
#graph to viz associations by source
ggplot(data = haydendat.long, mapping = aes(y = value, x = dist.rounded.km)) +
geom_point(size = 1)+
facet_wrap(analyte~., scales = "free") #ln transformed just to be able to compare better
#graph to viz associations by source
ggplot(data = haydendat.long, mapping = aes_string(y = "value", x = "dist.rounded.km", color = "source")) +
geom_point(size = 1)+
facet_wrap(analyte~., scales = "free") #ln transformed just to be able to compare better
View(haydendat.long)
haydendat.long <- pivot_longer(data = haydendat,
cols = c("distance.rounded.km","dist.tailings.km"),
values_to = "dist.rounded.km",
names_to = "source")
haydendat.long <- pivot_longer(data = haydendat,
cols = c("distance.rounded.km","dist.tailings.km"),
values_to = "dist.rounded.km",
names_to = "source")
haydendat.long[haydendat.long$source=="distance.rounded.km",]$source <- "Smelter"
haydendat.long[haydendat.long$source=="dist.tailings.km",]$source <- "Tailings"
haydendat.long$source <- factor(haydendat.long$source, levels = c("Tailings", "Smelter"))
#graph to viz associations by source
ggplot(data = haydendat.long, mapping = aes(y = value, x = dist.rounded.km, color = source)) +
geom_point(size = 1)+
facet_wrap(analyte~., scales = "free") #ln transformed just to be able to compare better
library(EnvStats)
library(lme4)
library(lmerTest)
library(ggeffects)
library(performance)
library(effects)
library(ggpubr)
library(emmeans)
library(multcomp)
library(car)
View(haydendat.long)
hsource1 <- lmer(data = haydendat.long,
log(value) ~ source*analyte + (1|site),
REML = F) #ML for comparison, REML for final
summary(hsource1)
hsource1 <- lmer(data = haydendat.long,
log(value) ~ source+analyte:source + (1|site),
REML = F) #ML for comparison, REML for final
summary(hsource1)
summary(hsource1)
model.effects <- allEffects(hsource1)
plot(model.effects) #not good comparisons because of scale differences
hsource1 <- lmer(data = haydendat.long,
log(value) ~ source
+ analyte:source + source:dist.rounded.km
+ (1|site),
REML = F) #ML for comparison, REML for final
summary(hsource1)
model.effects <- allEffects(hsource1)
plot(model.effects) #not good comparisons because of scale differences
hsource1 <- lmer(data = haydendat.long,
log(value) ~ source
+ analyte:source:dist.rounded.km
+ (1|site),
REML = F) #ML for comparison, REML for final
model.effects <- allEffects(hsource1)
plot(model.effects) #not good comparisons because of scale differences
hsource1 <- lmer(data = haydendat.long,
log(value) ~ source
+ analyte:source:as.numeric(dist.rounded.km)
+ (1|site),
REML = F) #ML for comparison, REML for final
summary(hsource1)
model.effects <- allEffects(hsource1)
plot(model.effects) #not good comparisons because of scale differences
haydendat.long$dist.rounded.km <- as.numeric(haydendat.long$dist.rounded.km)
haydendat.long <- pivot_longer(data = haydendat,
cols = c("distance.rounded.km","dist.tailings.km"),
values_to = "dist.rounded.km",
names_to = "source")
haydendat.long$dist.rounded.km <- as.numeric(haydendat.long$dist.rounded.km)
haydendat.long[haydendat.long$source=="distance.rounded.km",]$source <- "Smelter"
haydendat.long[haydendat.long$source=="dist.tailings.km",]$source <- "Tailings"
haydendat.long$source <- factor(haydendat.long$source, levels = c("Tailings", "Smelter"))
hsource1 <- lmer(data = haydendat.long,
log(value) ~ source
+ analyte:source:dist.rounded.km
+ (1|site),
REML = F) #ML for comparison, REML for final
model.effects <- allEffects(hsource1)
plot(model.effects) #not good comparisons because of scale differences
hsource1 <- lmer(data = haydendat.long,
log(value) ~ source + dist.rounded.km
+ analyte:source:dist.rounded.km
+ (1|site),
REML = F) #ML for comparison, REML for final
model.effects <- allEffects(hsource1)
plot(model.effects) #not good comparisons because of scale differences
summary(hsource1)
hsource1 <- lmer(data = haydendat.long,
log(value) ~ source + dist.rounded.km
# + analyte:source:dist.rounded.km
+ (1|site),
REML = F) #ML for comparison, REML for final
summary(hsource1)
model.effects <- allEffects(hsource1)
plot(model.effects) #not good comparisons because of scale differences
hsource1 <- lmer(data = haydendat.long,
log(value) ~ source + dist.rounded.km + analyte
# + analyte:source:dist.rounded.km
+ (1|site),
REML = F) #ML for comparison, REML for final
summary(hsource1)
model.effects <- allEffects(hsource1)
plot(model.effects) #not good comparisons because of scale differences
hsource1 <- lmer(data = haydendat.long,
log(value) ~ source + analyte
+ analyte:source:dist.rounded.km
+ (1|site),
REML = F) #ML for comparison, REML for final
summary(hsource1)
model.effects <- allEffects(hsource1)
plot(model.effects) #not good comparisons because of scale differences
#graph to viz associations by source
ggplot(data = haydendat.long, mapping = aes(y = value, x = dist.rounded.km, color = source)) +
geom_point(size = 1)+
facet_wrap(analyte~., scales = "free") #ln transformed just to be able to compare better
#graph to viz associations by source
ggplot(data = haydendat.long, mapping = aes(y = log(value), x = dist.rounded.km, color = source)) +
geom_point(size = 1)+
facet_wrap(analyte~., scales = "free") #ln transformed just to be able to compare better
hsource1 <- lmer(data = haydendat,
log(value) ~ distance.rounded.km:analyte
+ dist.tailings.km:analyte
+ (1|site),
REML = F) #ML for comparison, REML for final
summary(hsource1)
hsource1 <- lmer(data = haydendat,
log(value) ~ distance.rounded.km + dist.tailings.km
+ distance.rounded.km:analyte
+ dist.tailings.km:analyte
+ (1|site),
REML = F) #ML for comparison, REML for final
model.effects <- allEffects(hsource1)
plot(model.effects) #not good comparisons because of scale differences
anova(hsource1)
ggplot(data = deweydat.long, mapping = aes(y = analyte.ln, x = dist.rounded/1000, color = tailings)) +
geom_point(size = 1)+
facet_wrap(analyte~., scales = "free") #ln transformed just to be able to compare better
dsource1 <- lmer(data = deweydat,
log(value) ~ edist.rounded + wdist.rounded
+ edist.rounded:analyte
+ wdist.rounded:analyte
+ (1|site),
REML = F) #ML for comparison, REML for final
plot(dsource1)
summary(dsource1)
model.effects <- allEffects(dsource1)
anova(dsource1)
plot(model.effects) #not good comparisons because of scale differences and automatic set up
# tucson ----
tucson <- read_xlsx("~/Documents/GitHub/ProjectHarvest/WorkingFiles/data/data_processing/LATLOGSITE.xlsx", sheet = "tucson", col_names = TRUE)
# tucson ----
tucson <- read_xlsx("~/Documents/GitHub/ProjectHarvest/WorkingFiles/data/data_processing/LATLOGSITE.xlsx", sheet = "tucson", col_names = TRUE)
tdat <- iw.dm[iw.dm$community=="Tucson",]
tucsondat <- full_join(ttucsondat, tucson, by = c("site"))
tucsondat <- full_join(tucsondat, tucson, by = c("site"))
tucsondat <- full_join(tdat, tucson, by = c("site"))
tucsondat <- tucsondat[!is.na(tucsondat[c("community")]),]
tucsondat <- tucsondat[!is.na(tucsondat[c("ward")]),]
tucsondat <- tucsondat[!is.na(tucsondat[c("location.y")]),]
View(tucsondat)
tucsondat <- tucsondat[!is.na(tucsondat[c("location")]),]
tucsondat$ward <- factor(tucsondat$ward, levels = c("One", "Two", "Three", "Four", "Five", "Six"))
tdat <- iw.dm.long[iw.dm.long$community=="Tucson",]
tucsondat <- full_join(tdat, tucson, by = c("site"))
tucsondat <- tucsondat[!is.na(tucsondat[c("community")]),]
tucsondat <- tucsondat[!is.na(tucsondat[c("ward")]),]
tucsondat <- tucsondat[!is.na(tucsondat[c("location")]),]
tdat <- iw.dm.long[iw.dm.long$community=="Tucson",]
tucsondat <- full_join(tdat, tucson, by = c("site"))
tucsondat <- tucsondat[!is.na(tucsondat[c("community")]),]
tucsondat <- tucsondat[!is.na(tucsondat[c("ward")]),]
tucsondat <- tucsondat[!is.na(tucsondat[c("location")]),]
tucsondat$ward <- factor(tucsondat$ward, levels = c("One", "Two", "Three", "Four", "Five", "Six"))
tucsondat.long <- pivot_longer(data = tucsondat,
cols = c("dist.jensen.km","dist.fci.km", "dist.tia.km", "dist.afb.km"),
values_to = "dist.km",
names_to = "source")
#graph to viz associations by source
ggplot(data = tucsondat.long, mapping = aes(y = log(value), x = dist.km, color = source)) +
geom_point(size = 1)+
geom_smooth()+
facet_wrap(analyte~., scales = "free") #ln transformed just to be able to compare better
#graph to viz associations by source
ggplot(data = tucsondat.long, mapping = aes(y = log(value), x = dist.km, color = source)) +
#geom_point(size = 1)+
geom_smooth()+
facet_wrap(analyte~., scales = "free") #ln transformed just to be able to compare better
ggplot(data = tucsondat.long, mapping = aes(y = log(value), x = location)) +
\  geom_boxplot()+
ggplot(data = tucsondat.long, mapping = aes(y = log(value), x = location)) +
geom_boxplot()+
facet_wrap(analyte~., scales = "free") #ln transformed just to be able to compare better
ggplot(data = tucsondat.long, mapping = aes(y = log(value), x = ward)) +
geom_boxplot()+
facet_wrap(analyte~., scales = "free") #ln transformed just to be able to compare better
tsource1 <- lmer(data = tucsondat,
log(value) ~ dist.jensen.km + dist.fci.km + dist.tia.km + dist.afb.km
+ dist.jensen.km:analyte
+ dist.fci.km:analyte
+ dist.tia.km:analyte
+ dist.afb.km:analyte
+ (1|site),
REML = F) #ML for comparison, REML for final
tsource1 <- lmer(data = tucsondat,
log(value) ~ dist.jensen.km + dist.fci.km + dist.tia.km + dist.afb.km
+ dist.jensen.km:analyte
+ dist.fci.km:analyte
+ dist.tia.km:analyte
+ dist.afb.km:analyte
+ (1|site),
REML = F) #ML for comparison, REML for final
model.effects <- allEffects(tsource1)
plot(model.effects) #not good comparisons because of scale differences and automatic set up
anova(tsource1)
tsource1 <- lmer(data = tucsondat,
log(value) ~ dist.jensen.km + dist.fci.km + dist.tia.km + dist.afb.km + location + ward + season
+ dist.jensen.km:analyte
+ dist.fci.km:analyte
+ dist.tia.km:analyte
+ dist.afb.km:analyte
+ ward:analyte
+ location:analyte
+ (1|site),
REML = F) #ML for comparison, REML for final
model.effects <- allEffects(tsource1)
plot(model.effects) #not good comparisons because of scale differences and automatic set up
anova(tsource1)
tsource10 <- lmer(data = tucsondat,
log(value) ~
+ (1|site),
REML = F) #ML for comparison, REML for final
tsource.step <- step(tsource1, scope=list(lower=tsource0), direction="backward")
#try stepwise
tsource0 <- lmer(data = tucsondat,
log(value) ~
+ (1|site),
REML = F) #ML for comparison, REML for final
tsource.step <- step(tsource1, scope=list(lower=tsource0), direction="backward")
tsource.step
#remove jensen and see
tsource2 <- lmer(data = tucsondat,
log(value) ~ dist.fci.km + dist.tia.km + dist.afb.km + location + ward + season
+ dist.fci.km:analyte
+ dist.tia.km:analyte
+ dist.afb.km:analyte
+ ward:analyte
+ location:analyte
+ (1|site),
REML = F) #ML for comparison, REML for final
summary(tsource2)
#remove jensen and remove location
tsource2 <- lmer(data = tucsondat,
log(value) ~ dist.fci.km + dist.tia.km + dist.afb.km + ward + season
+ dist.fci.km:analyte
+ dist.tia.km:analyte
+ dist.afb.km:analyte
+ ward:analyte
+ (1|site),
REML = F) #ML for comparison, REML for final
summary(tsource2)
model.effects <- allEffects(tsource2)
plot(model.effects) #not good comparisons because of scale differences and automatic set up
anova(tsource2)
tsource.step <- stepAIC(tsource1, scope=list(lower=tsource0), direction="both")
tsource.step <- stepAIC(tsource1, direction="both")
tsource.step <- step(tsource1, scope=list(lower=tsource0), direction="backward")
tsource.step
tsource.step <- step(tsource1, direction="both", k = log(n))
tsource.step <- stepAIC(tsource1, direction="both", k = log(n))
tsource.step <- step(tsource1, scope=list(lower=tsource0), direction="both", k = log(n))
tsource.step <- step(tsource1, scope=list(lower=tsource0), direction="both"
)
tsource.step
#load libraries ----
library(readxl) #read excel files
library(tidyverse)
library(ggplot2)
iw.dm <- read_xlsx("~/Documents/GitHub/ProjectHarvest/WorkingFiles/data/data_clean/IW_DM_Y123.xlsx", sheet = "Corrected")
#add period and season variables
iw.dm$period <- iw.dm$samplings
iw.dm$season <- iw.dm$samplings
#redefine them
iw.dm[iw.dm$period=="First Winter",]$period <- "First"
iw.dm[iw.dm$period=="Last Winter",]$period <- "Last"
iw.dm[iw.dm$period=="First Monsoon",]$period <- "First"
iw.dm[iw.dm$period=="Last Monsoon",]$period <- "Last"
iw.dm[iw.dm$season=="First Winter",]$season <- "Winter"
iw.dm[iw.dm$season=="Last Winter",]$season <- "Winter"
iw.dm[iw.dm$season=="First Monsoon",]$season <- "Monsoon"
iw.dm[iw.dm$season=="Last Monsoon",]$season <- "Monsoon"
#changing year #Make a new variable with this
iw.dm$year <- iw.dm$sampling_year
iw.dm[iw.dm$year=="2017-2018",]$year <- "Water Year 1"
iw.dm[iw.dm$year=="2018-2019",]$year <- "Water Year 2"
iw.dm[iw.dm$year=="2019-2020",]$year <- "Water Year 3"
#remove field blanks. to remove anything, type !="Value" to remove them.
iw.dm <- iw.dm[iw.dm$type!="B", ]
#remove ATS samples because ATS samples are not included in PH research.
iw.dm <- iw.dm[iw.dm$site!="ATS1", ]
#remove year 3 monsoon samples
iw.dm$ssnyear <- paste(iw.dm$season, iw.dm$year)
iw.dm <- iw.dm[iw.dm$ssnyear!="Monsoon Water Year 3", ]
#confirm correct order of categorical variables
#iw.dm$samplings <- factor(iw.dm$samplings, levels = c("FW", "LW", "FM", "LM"))
iw.dm$samplings <- factor(iw.dm$samplings, levels = c("First Winter", "Last Winter", "First Monsoon", "Last Monsoon"))
iw.dm$period <- factor(iw.dm$period, levels = c("First", "Last"))
iw.dm$season <- factor(iw.dm$season, levels = c("Winter", "Monsoon"))
iw.dm$sampling_year <- factor(iw.dm$sampling_year, levels = c("Water Year 1", "Water Year 2", "Water Year 3"))
iw.dm$community <- factor(iw.dm$community, levels = c("Dewey-Humboldt", "Globe/Miami", "Hayden/Winkelman", "Tucson"))
#
#
# #For the detection data,
# #detect data
# #add period and season variables
# iw.dm.detects$period <- iw.dm.detects$samplings
# iw.dm.detects$season <- iw.dm.detects$samplings
#
#
# #redefine them
# iw.dm.detects[iw.dm.detects$period=="First Winter",]$period <- "First"
# iw.dm.detects[iw.dm.detects$period=="Last Winter",]$period <- "Last"
# iw.dm.detects[iw.dm.detects$period=="First Monsoon",]$period <- "First"
# iw.dm.detects[iw.dm.detects$period=="Last Monsoon",]$period <- "Last"
#
# iw.dm.detects[iw.dm.detects$season=="First Winter",]$season <- "Winter"
# iw.dm.detects[iw.dm.detects$season=="Last Winter",]$season <- "Winter"
# iw.dm.detects[iw.dm.detects$season=="First Monsoon",]$season <- "Monsoon"
# iw.dm.detects[iw.dm.detects$season=="Last Monsoon",]$season <- "Monsoon"
#
#
# #changing year
# iw.dm.detects$year<-iw.dm.detects$sampling_year
#
# iw.dm.detects[iw.dm.detects$sampling_year=="2017-2018",]$sampling_year <- "Water Year 1"
# iw.dm.detects[iw.dm.detects$sampling_year=="2018-2019",]$sampling_year <- "Water Year 2"
# iw.dm.detects[iw.dm.detects$sampling_year=="2019-2020",]$sampling_year <- "Water Year 3"
#
# #remove year 3 monsoon samples
# iw.dm.detects$ssnyear <- paste(iw.dm.detects$season, iw.dm.detects$sampling_year)
# iw.dm.detects <- iw.dm.detects[iw.dm.detects$ssnyear!="Monsoon Water Year 3", ]
#
# #remove field blanks. to remove anything, type !="Value" to remove them.
# iw.dm.detects <- iw.dm.detects[iw.dm.detects$type!="B", ]
#
#
# #remove ATS samples because ATS samples are not included in PH research.
# iw.dm.detects <- iw.dm.detects[iw.dm.detects$site!="ATS1", ]
#
# #confirm correct order of categorical variables
# #iw.dm.detects$samplings <- factor(iw.dm.detects$samplings, levels = c("FW", "LW", "FM", "LM"))
# iw.dm.detects$samplings <- factor(iw.dm.detects$samplings, levels = c("First Winter", "Last Winter", "First Monsoon", "Last Monsoon"))
# iw.dm.detects$period <- factor(iw.dm.detects$period, levels = c("First", "Last"))
# iw.dm.detects$season <- factor(iw.dm.detects$season, levels = c("Winter", "Monsoon"))
# iw.dm.detects$sampling_year <- factor(iw.dm.detects$sampling_year, levels = c("Water Year 1", "Water Year 2", "Water Year 3"))
# iw.dm.detects$community <- factor(iw.dm.detects$community, levels = c("Dewey-Humboldt", "Globe/Miami", "Hayden/Winkelman", "Tucson"))
#
#
iw.pHec <- read_xlsx("~/Documents/GitHub/ProjectHarvest/WorkingFiles/data/data_clean/IW_pHEC_Y123.xlsx", sheet = 1, col_names = TRUE)
iw.pHec <- iw.pHec[iw.pHec$type!="B",] #removing field blanks
iw.dm <- full_join(iw.dm, iw.pHec, by = c("sample.name", "type")) #joins the phec data with the original iw.dm we had before
iw.dm <- iw.dm[!is.na(iw.dm$community),]
# na.omit(iw.dm$community)
#add mining community vs urban community
iw.dm$landuse <- "Mining Community"
iw.dm[iw.dm$community=="Tucson",]$landuse <- "Urban Community"
pli <- read.csv("~/Documents/GitHub/ProjectHarvest/WorkingFiles/data/data_processing/pollution_load_selected_analytes.csv")
iw.dm$pli <- pli$pollution_index_selected_analytes
pli_dat<- pli[-c(19,39),]
pli_dat <- pli_dat[pli_dat$site!="H222",]
pli_short<-  pli_dat[, -c(15, 19, 25, 26, 28, 29)]
pli_dat2<- pivot_longer(pli_short,
cols = Be:Pb,
values_to = "concentration_factor",
names_to = "analytes")
pli_dat3 <- full_join(pli_dat2, com, by = c("site"))
com <- read_xlsx("~/Documents/GitHub/ProjectHarvest/WorkingFiles/data/data_processing/LATLOGSITE.xlsx", sheet = "community", col_names = TRUE)
iw.dm <- full_join(iw.dm, com, by = c("site"))
iw.dm <- iw.dm[!is.na(iw.dm$mlod.name),]
View(iw.dm)
aggregate(iw.dm$proximity.km, by = c("source"), FUN = mean())
prox.summary <- iw.dm %>%
group_by(source) %>%
summarise(mean = mean(na.omit(proximity.km)),
min = min(na.omit(proximity.km)),
max = max(na.omit(proximity.km)))
view(prox.summary)
